[{"cell_number": 4, "source": "#plotly.offline doesn't push your charts to the clouds\nimport plotly.offline as pyo\n#allows us to create the Data and Figure objects\nfrom plotly.graph_objs import *\n#plotly.plotly pushes your charts to the cloud  \nimport plotly.plotly as py\n\n#pandas is a data analysis library\nimport pandas as pd\nfrom pandas import DataFrame"}, {"cell_number": 6, "source": "from plotly.tools import make_subplots\nimport datetime"}, {"cell_number": 7, "source": "#lets us see the charts in an iPython Notebook\npyo.offline.init_notebook_mode() # run at the start of every ipython "}, {"cell_number": 9, "source": "crimes = pd.read_csv('http://richard-muir.com/data/public/csv/MetPoliceCrimeStats.csv',\n                    index_col = 0)\ncrimes.head()", "generated_dataframes": ["crimes.csv"]}, {"cell_number": 11, "source": "metCrimes = make_subplots(rows = 7,\n                         cols = 1,\n                         specs = [[{'rowspan' : 2}],\n                                 [None],\n                                  [{'rowspan' : 2}],\n                                 [None],\n                                 [{}],\n                                 [{}],\n                                 [{}]],\n                         subplot_titles = [ 'Outcomes for crime',\n                                           'Types of crime by location',\n                                           'Crimes by month',\n                                          'Crimes by location',\n                                          'Types of crime'\n                                         ])\n"}, {"cell_number": 13, "source": "crimesByMonth = crimes.groupby('Crime Month', as_index = False).count()\ncrimesByMonth", "generated_dataframes": ["crimesByMonth.csv"]}, {"cell_number": 15, "source": "crimesByMonth['Crime Month'] = pd.to_datetime(crimesByMonth['Crime Month'], format='%Y-%m')\n\ncrimesByMonth['Month'] = crimesByMonth['Crime Month'].apply(lambda x: x.strftime(\"%B\"))\ncrimesByMonth.head()"}, {"cell_number": 16, "source": "crimesByMonth['text'] = crimesByMonth.apply(lambda x: \"<b>{}:</b><br>{:,} crimes\".format(x['Month'], x['Crime type']), axis = 1)\ncrimesByMonth.head()"}, {"cell_number": 18, "source": "monthCrime = {'type' : 'scatter',\n              'x' : crimesByMonth['Month'],\n              'y' : crimesByMonth['Area'],\n              'text' : crimesByMonth['text'],\n              'showlegend' : False,\n               'marker' : {'color' : '#944dc7',\n                          'size' : 8,\n                          'line' : {'width' : 1,\n                                   'color' : '#333'}},\n               'name' : 'Number of crimes<br>by month',\n              'hoverinfo' : 'text'}\n\npyo.iplot([monthCrime])"}, {"cell_number": 20, "source": "metCrimes.append_trace(monthCrime, 5, 1)\n\nmetCrimes['layout']['yaxis3'].update({'range' : [0, max(crimesByMonth['Area']) * 1.05]})\nmetCrimes['layout'].update({'height' : 1000})\n\npyo.iplot(metCrimes)"}, {"cell_number": 22, "source": "areaCrime = crimes.groupby('Area', as_index=False).count()\nareaCrime.head(10)", "generated_dataframes": ["areaCrime.csv"]}, {"cell_number": 24, "source": "def inLondon(row):\n    if row['Outcome Month'] > 1000: \n        return row['Area']\n    else: \n        return 'Not in London'\n\nareaCrime['Area'] = areaCrime.apply(inLondon, axis = 1)\nareaCrime.head(10)"}, {"cell_number": 25, "source": "areaCrime = areaCrime.groupby('Area', as_index = False).sum()\nareaCrime", "generated_dataframes": ["areaCrime__1.csv"]}, {"cell_number": 27, "source": "areaCrime.sort_values(by='Outcome Month', ascending=False, inplace = True)\n\nareaBar = {'type' : 'bar',\n      'x' : areaCrime['Area'],\n      'y' : areaCrime['Outcome Month'],\n       'name' : 'Crimes by Area',\n           'showlegend' : False,\n       'hoverinfo' : 'x+y',\n      'marker' : {'color' : 'rgba(77, 83, 199, 0.6)',\n                 'line' : {'width' : 1,\n                          'color' : '#333'}}}\n\npyo.iplot([areaBar])"}, {"cell_number": 29, "source": "metCrimes.append_trace(areaBar, row = 6, col = 1)\n\nmetCrimes['layout']['xaxis4'].update({'tickangle' : 45})\n\npyo.iplot(metCrimes)"}, {"cell_number": 31, "source": "crimeTypes = crimes.groupby('Crime type', as_index=False).count()\ncrimeTypes.head()", "generated_dataframes": ["crimeTypes.csv"]}, {"cell_number": 33, "source": "crimeTypes.sort_values(by='Outcome Month', ascending = False, inplace = True)\n\ncrimeBar = {'type' : 'bar',\n      'x' : crimeTypes['Crime type'],\n      'y' : crimeTypes['Outcome Month'],\n       'name' : 'Crimes by type',\n            'showlegend' : False,\n       'hoverinfo' : 'x+y',\n      'marker' : {'color' : 'rgba(226, 97, 50, 0.6)',\n                 'line' : {'width' : 1,\n                          'color' : '#333'}}}\n\npyo.iplot([crimeBar])"}, {"cell_number": 35, "source": "metCrimes.append_trace(crimeBar, row = 7, col = 1)\n\npyo.iplot(metCrimes)"}, {"cell_number": 37, "source": "typeLoc = crimes.groupby(['Crime type', 'Area'], as_index=False).count()\ntypeLoc.head()", "generated_dataframes": ["typeLoc.csv"]}, {"cell_number": 39, "source": "locationRecode = crimes.groupby(['Area'], as_index=False).count()\nlocationRecode['Recoded Area'] = locationRecode.apply(inLondon, axis = 1)\nlocationRecode.head(10)", "generated_dataframes": ["locationRecode.csv"]}, {"cell_number": 41, "source": "typeLoc = typeLoc.merge(locationRecode[['Area','Recoded Area']], how = 'left', on='Area')\ntypeLoc.head(20)", "generated_dataframes": ["typeLoc__1.csv"]}, {"cell_number": 43, "source": "typeLoc = typeLoc.drop(['Area'], axis = 1).rename(columns={'Recoded Area' : 'Area'})\ntypeLoc.head()", "generated_dataframes": ["typeLoc__2.csv"]}, {"cell_number": 44, "source": "typeLoc = typeLoc.groupby(['Crime type','Area'], as_index=False).sum()\ntypeLoc", "generated_dataframes": ["typeLoc__3.csv"]}, {"cell_number": 46, "source": "typeLoc['text'] = typeLoc.apply(lambda x: \"<b>{}</b><br>{}<br>{:,}\".format(x['Area'], \n                                                                           x['Crime type'],\n                                                                          x['Outcome Month']),\n                               axis = 1)\ntypeLoc.head()"}, {"cell_number": 48, "source": "typeLocScatter = {'type' : 'scatter',\n                  'mode' : 'markers',\n                 'x' : typeLoc['Area'],\n                 'y' : typeLoc['Crime type'],\n                  'text' : typeLoc['text'],\n                  'opacity' : 0.8,\n                  'hoverinfo' : 'text',\n                  'showlegend' : False,\n                  'name' : 'Type and Location of crime',\n                  'marker' : {'size' : typeLoc['Outcome Month'],\n                             'sizeref' : 150,\n                             'sizemin' : 1.5}\n                 }\n\npyo.iplot([typeLocScatter])"}, {"cell_number": 50, "source": "metCrimes.append_trace(typeLocScatter, row = 3, col = 1)\n\npyo.iplot(metCrimes)"}, {"cell_number": 52, "source": "def wideCoding(crime):\n    if crime in ['Court case unable to proceed',\n                 'Investigation complete; no suspect identified',\n                'Formal action is not in the public interest',\n                 'Offender given absolute discharge',\n                'Unable to prosecute suspect']:\n        return 'No judicial outcome'\n    elif crime in ['Local resolution','Offender given a caution',\n                   'Offender given a drugs possession warning',\n                   'Offender given community sentence',\n                   'Offender given conditional discharge',\n                   'Offender given penalty notice',\n                   'Offender fined',\n                   'Offender deprived of property',\n                   'Offender given suspended prison sentence',\n                   'Offender otherwise dealt with',\n                   'Offender ordered to pay compensation']:\n        return 'Punished, not prison'\n    elif crime in ['Suspect charged',\n                   'Suspect charged as part of another case',\n                  'Defendant sent to Crown Court']:\n        return 'Outcome not yet known'\n    else:\n        return crime\n    \ncrimes['Broad Outcome'] = crimes['Outcome type'].apply(wideCoding)\ncrimes.head()"}, {"cell_number": 54, "source": "typeOutcome = crimes.groupby(['Crime type','Broad Outcome'], as_index=False).count()\ntypeOutcome['text'] = typeOutcome.apply(lambda x: \"<b>{}</b><br>{}<br>{:,}\".format(x['Crime type'],\n                                                                                   x['Broad Outcome'],\n                                                                                  x['Outcome Month']),\n                               axis = 1)\ntypeOutcome.head()", "generated_dataframes": ["typeOutcome.csv"]}, {"cell_number": 56, "source": "typeOutcomeScatter = {'type' : 'scatter',\n                  'mode' : 'markers',\n                 'x' : typeOutcome['Broad Outcome'],\n                 'y' : typeOutcome['Crime type'],\n                  'text' : typeOutcome['text'],\n                  'opacity' : 0.8,\n                  'hoverinfo' : 'text',\n                      'showlegend' : False,\n                  'name' : 'Type of crime and outcome',\n                  'marker' : {'size' : typeOutcome['Outcome Month'],\n                             'sizeref' : 1000,\n                             'sizemin' : 2}\n                 }\n\npyo.iplot([typeOutcomeScatter])"}, {"cell_number": 58, "source": "metCrimes.append_trace(typeOutcomeScatter, row = 1, col = 1)\n\npyo.iplot(metCrimes)"}, {"cell_number": 61, "source": "metCrimes['layout']['xaxis2'].update({'tickangle' : 45})\nmetCrimes['layout']['xaxis1'].update({'showgrid' : False})\n\npyo.iplot(metCrimes)"}, {"cell_number": 63, "source": "metCrimes['layout'].update({'margin' : {'l' : 180,\n                                        'b' : 120,\n                                        'r' : 90}})\n\npyo.iplot(metCrimes)"}, {"cell_number": 65, "source": "metCrimes['layout'].update({'height' : 1500})\npyo.iplot(metCrimes)"}, {"cell_number": 67, "source": "metCrimes['layout']['annotations'][0]['y'] = 0.95"}, {"cell_number": 69, "source": "metCrimes['layout']['yaxis2'].update({'domain' : [0.51, 0.74]})\nmetCrimes['layout']['annotations'][1]['y'] = 0.73\npyo.iplot(metCrimes)"}, {"cell_number": 71, "source": "metCrimes['layout']['annotations'][3]['y'] "}, {"cell_number": 72, "source": "metCrimes['layout']['yaxis4'].update({'domain' : [0.19, 0.27]})\nmetCrimes['layout']['annotations'][3]['y'] = 0.26\npyo.iplot(metCrimes)"}, {"cell_number": 74, "source": "metCrimes['layout']['annotations'].append({'text' : 'Crime recorded by the Metropolitan Police in 2016',\n                                      'showarrow' : False,\n                                       'xref' : 'paper',\n                                      'x' : 0.5,\n                                      'xanchor' : 'centre',\n                                      'yref' : 'paper',\n                                      'y' : 1,\n                                      'yanchor' : 'top',\n                                      'font' : {'size' : 24}})\n\nmetCrimes['layout'].update({'hovermode' : 'closest'})\n\npyo.iplot(metCrimes)", "error_before": "None", "error_in": "'tuple' object has no attribute 'append'"}, {"cell_number": 76, "source": "py.plot(metCrimes, filename=\"Crimes recorded by the Metropolitan Police\", fileopt=\"overwrite\")", "error_before": "None", "error_in": "__init__() got an unexpected keyword argument 'encoding'"}]